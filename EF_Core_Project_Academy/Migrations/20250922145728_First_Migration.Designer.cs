// <auto-generated />
using System;
using EF_Core_Project_Academy.AcademyDBContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EF_Core_Project_Academy.Migrations
{
    [DbContext(typeof(MyDBContext))]
    [Migration("20250922145728_First_Migration")]
    partial class First_Migration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("EF_Core_Project_Academy.Model.Curator", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("curators_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(MAX)")
                        .HasColumnName("curators_name");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("nvarchar(MAX)")
                        .HasColumnName("curators_surname");

                    b.HasKey("Id")
                        .HasName("PK_CuratorId");

                    b.ToTable("Curators", (string)null);
                });

            modelBuilder.Entity("EF_Core_Project_Academy.Model.Department", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("departments_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Building")
                        .HasColumnType("int")
                        .HasColumnName("departments_building");

                    b.Property<int>("FacultyId")
                        .HasColumnType("int")
                        .HasColumnName("departments_facultyId");

                    b.Property<decimal>("Financing")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("money")
                        .HasColumnName("departments_financing")
                        .HasDefaultValueSql("('0')");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("departments_name");

                    b.HasKey("Id")
                        .HasName("PK_DepartmentId");

                    b.HasIndex("FacultyId");

                    b.HasIndex(new[] { "Name" }, "UQ_DepartmentName")
                        .IsUnique();

                    b.ToTable("Departments", null, t =>
                        {
                            t.HasCheckConstraint("CC_DepartmentBuilding", "[departments_building] >= 1 AND [departments_building] <= 5");
                        });
                });

            modelBuilder.Entity("EF_Core_Project_Academy.Model.Faculty", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("faculties_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("faculties_name");

                    b.HasKey("Id")
                        .HasName("PK_FacultyId");

                    b.HasIndex(new[] { "Name" }, "UQ_FacultyName")
                        .IsUnique();

                    b.ToTable("Faculties", (string)null);
                });

            modelBuilder.Entity("EF_Core_Project_Academy.Model.Group", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("groups_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int")
                        .HasColumnName("groups_departmentId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("groups_name");

                    b.Property<int>("Year")
                        .HasColumnType("int")
                        .HasColumnName("groups_year");

                    b.HasKey("Id")
                        .HasName("PK_GroupId");

                    b.HasIndex("DepartmentId");

                    b.HasIndex(new[] { "Name" }, "UQ_GroupsName")
                        .IsUnique();

                    b.ToTable("Groups", null, t =>
                        {
                            t.HasCheckConstraint("CC_GroupYear", "[groups_year] >= 1 AND [groups_year] <= 5");
                        });
                });

            modelBuilder.Entity("EF_Core_Project_Academy.Model.GroupCurator", b =>
                {
                    b.Property<int>("CuratorId")
                        .HasColumnType("int")
                        .HasColumnName("groupsCurators_curatorId");

                    b.Property<int>("GroupId")
                        .HasColumnType("int")
                        .HasColumnName("groupsCurators_groupId");

                    b.HasKey("CuratorId", "GroupId");

                    b.HasIndex("GroupId");

                    b.ToTable("GroupsCurators", (string)null);
                });

            modelBuilder.Entity("EF_Core_Project_Academy.Model.GroupLecture", b =>
                {
                    b.Property<int>("GroupId")
                        .HasColumnType("int")
                        .HasColumnName("groupsLectures_groupId");

                    b.Property<int>("LectureId")
                        .HasColumnType("int")
                        .HasColumnName("groupsLectures_lectureId");

                    b.HasKey("GroupId", "LectureId");

                    b.HasIndex("LectureId");

                    b.ToTable("GroupsLectures", (string)null);
                });

            modelBuilder.Entity("EF_Core_Project_Academy.Model.GroupStudent", b =>
                {
                    b.Property<int>("GroupId")
                        .HasColumnType("int")
                        .HasColumnName("groupsStudents_groupId");

                    b.Property<int>("StudentId")
                        .HasColumnType("int")
                        .HasColumnName("groupsStudents_studentId");

                    b.HasKey("GroupId", "StudentId");

                    b.HasIndex("StudentId");

                    b.ToTable("GroupsStudents", (string)null);
                });

            modelBuilder.Entity("EF_Core_Project_Academy.Model.Lecture", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("lectures_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateOnly>("LectureDate")
                        .HasColumnType("date")
                        .HasColumnName("lectures_date");

                    b.Property<int>("SubjectId")
                        .HasColumnType("int")
                        .HasColumnName("lectures_subjectId");

                    b.Property<int>("TeacherId")
                        .HasColumnType("int")
                        .HasColumnName("lectures_teacherId");

                    b.HasKey("Id")
                        .HasName("PK_LectureId");

                    b.HasIndex("SubjectId");

                    b.HasIndex("TeacherId");

                    b.ToTable("Lectures", null, t =>
                        {
                            t.HasCheckConstraint("CC_LectureDate", "[lectures_date] <= GETDATE()");
                        });
                });

            modelBuilder.Entity("EF_Core_Project_Academy.Model.Student", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("students_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(MAX)")
                        .HasColumnName("students_name");

                    b.Property<int>("Rating")
                        .HasColumnType("int")
                        .HasColumnName("students_rating");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("nvarchar(MAX)")
                        .HasColumnName("students_surname");

                    b.HasKey("Id")
                        .HasName("PK_StudentId");

                    b.ToTable("Students", null, t =>
                        {
                            t.HasCheckConstraint("CC_StudentRating", "[students_rating] > 0 AND [students_rating] <= 5");
                        });
                });

            modelBuilder.Entity("EF_Core_Project_Academy.Model.Subject", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("subjects_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("subjects_name");

                    b.HasKey("Id")
                        .HasName("PK_SubjectId");

                    b.HasIndex(new[] { "Name" }, "UQ_SubjectName")
                        .IsUnique();

                    b.ToTable("Subjects", (string)null);
                });

            modelBuilder.Entity("EF_Core_Project_Academy.Model.Teacher", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("teachers_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool?>("IsProfessor")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("teachers_IsProfessor");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(MAX)")
                        .HasColumnName("teachers_name");

                    b.Property<decimal>("Salary")
                        .HasColumnType("money")
                        .HasColumnName("teachers_salary");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("nvarchar(MAX)")
                        .HasColumnName("teachers_surname");

                    b.HasKey("Id")
                        .HasName("PK_TeacherId");

                    b.ToTable("Teachers", null, t =>
                        {
                            t.HasCheckConstraint("CC_TeacherSalary", "[teachers_salary] >= 0");
                        });
                });

            modelBuilder.Entity("EF_Core_Project_Academy.Model.Department", b =>
                {
                    b.HasOne("EF_Core_Project_Academy.Model.Faculty", "Faculty")
                        .WithMany("Departments")
                        .HasForeignKey("FacultyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_departments_facultyId");

                    b.Navigation("Faculty");
                });

            modelBuilder.Entity("EF_Core_Project_Academy.Model.Group", b =>
                {
                    b.HasOne("EF_Core_Project_Academy.Model.Department", "Department")
                        .WithMany("Groups")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_groups_departmentId");

                    b.Navigation("Department");
                });

            modelBuilder.Entity("EF_Core_Project_Academy.Model.GroupCurator", b =>
                {
                    b.HasOne("EF_Core_Project_Academy.Model.Curator", "Curator")
                        .WithMany("GroupsCurators")
                        .HasForeignKey("CuratorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_groupsCurators_curatorId");

                    b.HasOne("EF_Core_Project_Academy.Model.Group", "Group")
                        .WithMany("GroupsCurators")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_groupsCurators_groupId");

                    b.Navigation("Curator");

                    b.Navigation("Group");
                });

            modelBuilder.Entity("EF_Core_Project_Academy.Model.GroupLecture", b =>
                {
                    b.HasOne("EF_Core_Project_Academy.Model.Group", "Group")
                        .WithMany("GroupsLectures")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_groupsLectures_groupId");

                    b.HasOne("EF_Core_Project_Academy.Model.Lecture", "Lecture")
                        .WithMany("GroupsLectures")
                        .HasForeignKey("LectureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_groupsLectures_lectureId");

                    b.Navigation("Group");

                    b.Navigation("Lecture");
                });

            modelBuilder.Entity("EF_Core_Project_Academy.Model.GroupStudent", b =>
                {
                    b.HasOne("EF_Core_Project_Academy.Model.Group", "Group")
                        .WithMany("GroupsStudents")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_groupsStudents_groupId");

                    b.HasOne("EF_Core_Project_Academy.Model.Student", "Student")
                        .WithMany("GroupsStudents")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_groupsStudents_studentId");

                    b.Navigation("Group");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("EF_Core_Project_Academy.Model.Lecture", b =>
                {
                    b.HasOne("EF_Core_Project_Academy.Model.Subject", "Subject")
                        .WithMany("Lectures")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_lectures_subjectId");

                    b.HasOne("EF_Core_Project_Academy.Model.Teacher", "Teacher")
                        .WithMany("Lectures")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_lectures_teacherId");

                    b.Navigation("Subject");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("EF_Core_Project_Academy.Model.Curator", b =>
                {
                    b.Navigation("GroupsCurators");
                });

            modelBuilder.Entity("EF_Core_Project_Academy.Model.Department", b =>
                {
                    b.Navigation("Groups");
                });

            modelBuilder.Entity("EF_Core_Project_Academy.Model.Faculty", b =>
                {
                    b.Navigation("Departments");
                });

            modelBuilder.Entity("EF_Core_Project_Academy.Model.Group", b =>
                {
                    b.Navigation("GroupsCurators");

                    b.Navigation("GroupsLectures");

                    b.Navigation("GroupsStudents");
                });

            modelBuilder.Entity("EF_Core_Project_Academy.Model.Lecture", b =>
                {
                    b.Navigation("GroupsLectures");
                });

            modelBuilder.Entity("EF_Core_Project_Academy.Model.Student", b =>
                {
                    b.Navigation("GroupsStudents");
                });

            modelBuilder.Entity("EF_Core_Project_Academy.Model.Subject", b =>
                {
                    b.Navigation("Lectures");
                });

            modelBuilder.Entity("EF_Core_Project_Academy.Model.Teacher", b =>
                {
                    b.Navigation("Lectures");
                });
#pragma warning restore 612, 618
        }
    }
}
